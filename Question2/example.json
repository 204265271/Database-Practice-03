{
    "chapter": "关系规范化理论",
    "sections": [
        {
            "section_title": "基本概念与问题引入",
            "knowledge_points": [
                {
                    "key_point": "关系模式设计问题",
                    "explanation": "非规范化关系模式会导致数据冗余、插入异常、更新异常和删除异常。例如学生选课表中存储系主任信息时，会导致系主任信息重复存储（冗余）且无法独立维护（异常）",
                    "qa": {
                        "question": "非规范化关系模式可能引发哪些问题？请举例说明。",
                        "answer": "数据冗余（如系主任信息重复存储）、插入异常（无法单独插入未选课学生的系信息）、更新异常（修改系主任需更新多条记录）、删除异常（删除最后一条学生记录会丢失系信息）"
                    }
                },
                {
                    "key_point": "函数依赖",
                    "explanation": "描述属性间逻辑关系的约束，包括完全依赖、部分依赖和传递依赖。如学号→系名是完全依赖，(学号,课程)→成绩是部分依赖，学号→系主任是传递依赖",
                    "qa": {
                        "question": "什么是传递函数依赖？请用学生-系-系主任的例子说明。",
                        "answer": "若存在学号→系名，系名→系主任，且系名↛学号，则系主任传递依赖于学号"
                    }
                }
            ]
        },
        {
            "section_title": "范式体系",
            "knowledge_points": [
                {
                    "key_point": "第一范式（1NF）",
                    "explanation": "属性值不可再分，消除重复组。如将包含多值的地址字段拆分为省、市、街道",
                    "qa": {
                        "question": "判断表结构是否满足1NF：商品表(商品ID, 商品名称, 规格['红色','L'])",
                        "answer": "不满足1NF，'规格'字段包含多个值，需拆分为独立属性或新建规格表"
                    }
                },
                {
                    "key_point": "第二范式（2NF）",
                    "explanation": "消除非主属性对候选键的部分依赖。如将(学号,课程,学分)分解为选课表和课程表",
                    "qa": {
                        "question": "为什么(学号,课程)→姓名的设计违反2NF？如何修正？",
                        "answer": "姓名仅依赖学号（候选键部分），应拆分为学生表(学号,姓名)和选课表(学号,课程)"
                    }
                },
                {
                    "key_point": "第三范式（3NF）",
                    "explanation": "消除非主属性的传递依赖。如将学生表拆分为学生-系表和系-主任表",
                    "qa": {
                        "question": "关系模式R(工号,部门,经理)是否满足3NF？若不满足请分解。",
                        "answer": "不满足（工号→部门→经理）。应分解为R1(工号,部门)和R2(部门,经理) "
                    }
                },
                {
                    "key_point": "BCNF范式",
                    "explanation": "所有决定因素都包含候选键。如解决(课程,教师)→教材且教师→课程的依赖",
                    "qa": {
                        "question": "判断R(A,B,C)是否满足BCNF：依赖集{A→B, B→A, A→C}",
                        "answer": "不满足。候选键为A/B，但A→C中C是非主属性，分解为R1(A,B)和R2(A,C)"
                    }
                }
            ]
        },
        {
            "section_title": "规范化实践",
            "knowledge_points": [
                {
                    "key_point": "模式分解原则",
                    "explanation": "需满足无损连接性和保持函数依赖。如通过自然连接可恢复原表且不丢失依赖关系",
                    "qa": {
                        "question": "分解后的两个子模式如何验证无损连接性？",
                        "answer": "使用矩阵法：若存在某行全为a，或通过函数依赖推导可使某行全为a，则为无损分解"
                    }
                },
                {
                    "key_point": "反规范化策略",
                    "explanation": "在查询性能与规范化间权衡，适度冗余。如订单表增加客户姓名字段避免频繁连接查询",
                    "qa": {
                        "question": "什么场景下需要反规范化？请举例说明。",
                        "answer": "高频复杂查询（如报表统计），可增加汇总字段或冗余关联字段（如商品详情页展示分类名称）"
                    }
                }
            ]
        }
    ],
    "question_bank": [
        {
            "question": "Armstrong公理包含哪些基本规则？",
            "answer": "自反律（若Y⊆X则X→Y）、增广律（X→Y则XZ→YZ）、传递律（X→Y且Y→Z则X→Z）"
        },
        {
            "question": "如何求属性集X的闭包？",
            "answer": "通过反复应用函数依赖，直到不再有新属性加入。例如F={A→B,B→C}，则A⁺=ABC "
        },
        {
            "question": "候选键的判定条件是什么？",
            "answer": "候选键K需满足K的闭包包含所有属性，且K的任何真子集闭包不包含全部属性"
        }
    ]
}
